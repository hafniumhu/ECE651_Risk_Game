/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'com.bmuschko.clover' version '2.2.3'
}

mainClassName='edu.duke.ece651.risc'

allprojects{
    repositories{
        jcenter()
    }
    task hello{
        doLast{
            println("I'm $project.name")
        }
    }
}

subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories{
        jcenter()
    }
    dependencies {
        // This dependency is used by the application.
        implementation 'com.google.guava:guava:28.0-jre'
        
        // Use JUnit Jupiter API for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        
        // Use JUnit Jupiter Engine for testing.
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'

        clover 'org.openclover:clover:4.3.1'

        testCompile "org.mockito:mockito-core:2.+"
        testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
    }
    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
    clover {
        compiler {
            additionalArgs = "-g:lines,source,vars"
        }
    }

}

clover {
    report{
        xml = true
        html = true
    }
}

project (':shared'){
}

project (':server'){
    dependencies{
        implementation project(':shared')
    }
}

project (':authServer'){
}

project (':chatServer'){    
}

project (':client'){
    dependencies{
        implementation project(':shared')
    }
}

tasks.register("run-server"){
    dependsOn project('server').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Game Server'
}

tasks.register("run-authServer"){
    dependsOn project('authServer').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Authentication Server'
}

tasks.register("run-chatServer"){
    dependsOn project('chatServer').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Chat Server'
}

tasks.register("run-client"){
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

tasks.withType(JavaCompile) {
    options.debug = true
}

task resolveDependencies {
    doLast{
        project.rootProject.allprojects.each { subProject->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }            
            }
        }
    }
}
